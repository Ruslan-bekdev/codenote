{"version":3,"file":"syntax-CMZ0uCm0.js","sources":["../../src/dataBase/syntax.js"],"sourcesContent":["export default {\r\n    title: \"Синтаксис\",\r\n    navTitle: \"Синтаксис\",\r\n    id: \"syntax\",\r\n    items: [\r\n        {\r\n            summary: \"Методы импорта Vite\",\r\n            content: \"1. ?worker\\n\" +\r\n                \"\\n\" +\r\n                \"Позволяет импортировать файл как Web Worker.\\n\" +\r\n                \"\\n\" +\r\n                \"const worker = new Worker(new URL('./worker.js', import.meta.url), { type: 'module' });\\n\" +\r\n                \"\\n\" +\r\n                \"2. ?inline\\n\" +\r\n                \"\\n\" +\r\n                \"    Преобразует содержимое файла в строку (работает для небольших ресурсов, например, SVG).\\n\" +\r\n                \"\\n\" +\r\n                \"import svgContent from './icon.svg?inline'; // svgContent содержит строку с SVG\\n\" +\r\n                \"\\n\" +\r\n                \"3. ?url\\n\" +\r\n                \"\\n\" +\r\n                \"    Импортирует путь к файлу, а не само содержимое.\\n\" +\r\n                \"\\n\" +\r\n                \"import imagePath from './image.png?url'; // imagePath содержит URL файла\\n\" +\r\n                \"\\n\" +\r\n                \"4. ?raw\\n\" +\r\n                \"\\n\" +\r\n                \"    Импортирует содержимое файла как строку (полезно для текстовых файлов, таких как .txt или .svg).\\n\" +\r\n                \"\\n\" +\r\n                \"import txtContent from './file.txt?raw'; // txtContent содержит строку с содержимым файла\\n\" +\r\n                \"\\n\" +\r\n                \"5. import.meta.glob\\n\" +\r\n                \"\\n\" +\r\n                \"    Динамический импорт всех файлов, соответствующих шаблону.\\n\" +\r\n                \"\\n\" +\r\n                \"const modules = import.meta.glob('./components/*.vue');\\n\" +\r\n                \"// modules — объект, где ключи — пути, а значения — функции импорта.\\n\" +\r\n                \"\\n\" +\r\n                \"6. import.meta.globEager\\n\" +\r\n                \"\\n\" +\r\n                \"    Импортирует все файлы сразу (без ленивой загрузки).\\n\" +\r\n                \"\\n\" +\r\n                \"const modules = import.meta.globEager('./data/*.js');\\n\" +\r\n                \"\\n\" +\r\n                \"7. ?jsx\\n\" +\r\n                \"\\n\" +\r\n                \"    Преобразует JSX-файлы. Полезно для случаев, если файл не имеет стандартного расширения .jsx:\\n\" +\r\n                \"\\n\" +\r\n                \"import MyComponent from './component-file.js?jsx';\\n\" +\r\n                \"\\n\" +\r\n                \"8. ?wasm\\n\" +\r\n                \"\\n\" +\r\n                \"    Импортирует WebAssembly (WASM) модули.\\n\" +\r\n                \"\\n\" +\r\n                \"import wasmModule from './module.wasm';\\n\" +\r\n                \"\\n\" +\r\n                \"9. ?module\\n\" +\r\n                \"\\n\" +\r\n                \"    Явно указывает, что файл должен быть обработан как модуль.\\n\" +\r\n                \"\\n\" +\r\n                \"import styles from './styles.css?module';\\n\" +\r\n                \"\\n\" +\r\n                \"10. ?asset\\n\" +\r\n                \"\\n\" +\r\n                \"    Преобразует файл в ассет, используемый для статических ресурсов.\\n\" +\r\n                \"\\n\" +\r\n                \"import assetUrl from './file.png?asset';\"\r\n        },\r\n        {\r\n          summary: 'css',\r\n          content: 'Единицы измерения:\\n' +\r\n              'px - в пикселях\\n' +\r\n              'em - от размера шрифта родителя\\n' +\r\n              'rem - от размера шрифты root (html)\\n' +\r\n              '% - от размера родителя\\n' +\r\n              'vw, vh - ширина, высота окна в процентах\\n' +\r\n              'dvw, dvh - динамичная ширина, высота окна в процентах (использовать на мобилках)\\n' +\r\n              'vmin, vmax - выбирают между высотой и шириной. vmin берет значение той стороны что меньше, vmax - что больше\\n' +\r\n              'ch - ширина цифры 0\\n' +\r\n              'ex - высота буквы x\\n' +\r\n              'cm,mm,in,pt,pc - обычно для печати используют. Это реальные размеры\\n\\n' +\r\n\r\n              'Цвета:\\n' +\r\n              'Даже в обычном hex формате можно указать прозрачность например #ffffff80 - белый с 80%' +\r\n              'rgb, rgba - rgb(red, green, blue), a - alpha (прозрачность)\\n' +\r\n              'hsl, hsla - hsl(hue - оттенок (0–360°, 0° = красный), saturation - насыщенность (0%–100%), lightness - яркость (0%–100%)), a - alpha (прозрачность)\\n' +\r\n              'currentColor - Наследует цвет текста. Например \"border: 2px solid currentColor;\"\\n\\n' +\r\n\r\n              'Фон:\\n' +\r\n              'background-image - изображение: url(\"image.jpg\"), либо градиент: linear-gradient(to right, red, blue); radial-gradient(circle, yellow, green); conic-gradient(red, yellow, green); \\n' +\r\n              'background-position - позиция фона: top, bottom, left, right, center; 50% 50% (по горизонтали/вертикали); 10px 20px\\n' +\r\n              'background-size - размер фона: auto исходный размер; cover заполняет всё пространство, обрезает фото; contain масштабирует чтобы влезло, не обрезает; 100px 200px\\n' +\r\n              'background-repeat - повторение фона: repeat по умолчанию, повторяется и по X, и по Y; no-repeat не повторяется; repeat-x, repeat-y повторение только по оси X/Y\\n' +\r\n              'background-clip - до куда показать фон: border-box до границы включая border; padding-box до padding, border прозрачный; content-box только для содержимого\\n' +\r\n              'background-origin - точка отсчета дял фона: border-box от границы; padding-box от padding, border прозрачный; content-box от содержимого\\n' +\r\n              'background-attachment - фиксирован ли фон при прокрутке: scroll - дефолт; fixed - параллакс, прилип к экрану; local - фон движется только если прокручивается лично блок с фоном, работает с overflow\\n\\n' +\r\n              'Сокращённая запись всех свойств - background: url(\"img.jpg\") no-repeat center/cover fixed; что означает: \\n' +\r\n              'background-image: url(\"img.jpg\");\\n' +\r\n              'background-repeat: no-repeat;\\n' +\r\n              'background-position: center;\\n' +\r\n              'background-size: cover;\\n' +\r\n              'background-attachment: fixed;\\n\\n' +\r\n\r\n              'Текст:\\n' +\r\n              'font-family - определяет шрифт, можно указать несколько через запятую а браузер возьмет первый доступный\\n' +\r\n              'font-weight - от 100 тонкого до 900 толстого; normal = 400 (обычный); bold = 700 (жирный)\\n; lighter — легче родительского; bolder — жирнее родительского' +\r\n              'font-style - наклон: normal дефолт; italic курсив, часто отдельный файл шрифта; oblique наклон текста без отдельного шрифта (буквы наклоняются программно)\\n' +\r\n              'font-variant - варианты: normal дефолт; small-caps маленькие заглавные буквы (не трогает уже заглавные, только строчные); all-small-caps все буквы маленькие заглавные; oldstyle-nums цифры старого стиля; lining-nums цифры в линию; tabular-nums цифры фиксированной ширины\\n' +\r\n              'line-height - высоат строки: разные значения, но можно например 1.5 без единицы измерения и будет относительно размера шрифта\\n' +\r\n              'letter-spacing - расстояние между буквами: normal - дефолт\\n' +\r\n              'word-spacing - расстояние между словами: normal - дефолт\\n' +\r\n              'text-align - горизонтальное выравнивание текста: left, right, center, justify (по ширине блока), start, end\\n' +\r\n              'text-decoration - оформление: none без подчеркивания; underline подчеркнутый; overline линия сверху; line-through зачеркнутый. Можно сразу несколько значений\\n' +\r\n              'text-transform - регистр: none дефолт; uppercase все заглавные; lowercase все строчные; capitalize первая буква каждого слова заглавная\\n' +\r\n              'text-indent - отступ первой строки\\n' +\r\n              'white-space - пробелы и переносы браузером: normal дефолт; nowrap запрещено переносить; pre сохраняет все пробелы и переносы; pre-wrap переносы по словам + сохранение пробелов; pre-line переносы по словам, пробелы сжимаются\\n' +\r\n              'word-wrap / overflow-wrap - перенос длиннх слов (word-wrap мы не используем это старый синтаксис): normal дефолт; break-word длинные слова разрываются, чтобы не выходили за блок\\n' +\r\n              'direction - направление текста: ltr дефолт; rtl справа налево\\n' +\r\n              'unicode-bidi - \\n\\n' +\r\n\r\n              'Border:\\n' +\r\n              'border-width - thin тонкая линия; medium средняя толщина; thick толстая линия;\\n' +\r\n              'border-color - transparent невидимый но занимает место; currentColor берет цвет текста;\\n' +\r\n              'border-style - none дефолт; solid сплошная; dotted точечная с круглыми; dashed пунктирная; double двойная сплошная; groove типа впадина; ridge наоборот типа выступ; inset как будто бы жлемент вдавлен в сайт; outset как будто элемент выступает;\\n' +\r\n              'Рельефные (groove, ridge, inset, outset) используют цвет рамки для расчёта светлых и тёмных оттенков, поэтому они зависят от border-color\\n\\n' +\r\n\r\n              'Display:\\n' +\r\n              'block - занимает всю ширину, например div или p такой\\n' +\r\n              'inline - занимает только свою ширину, например span\\n' +\r\n              'inline-block - гибрид, то же что и inline но можно задать ширину и высоту\\n' +\r\n              'flex - элементы флексят\\n' +\r\n              'inline-flex - тоже флексят, но контейнер не занимает всю ширину\\n' +\r\n              'grid - сетка типа\\n' +\r\n              'inline-grid - сетка с inline контейнером\\n' +\r\n              'none - элемент не существует\\n' +\r\n              'list-item - элемент теперь пункт списка, добавляет маркер или номер как у li например\\n' +\r\n              'table - ведет себя как <table>\\n' +\r\n              'inline-table - тот же table но inline\\n\\n' +\r\n\r\n              'Table (таблица):\\n' +\r\n              'table-layout - управление шириной колонок: auto подстраивается под содержимое; fixed равномерное распределение ширины, игнорируя содержимое (быстрее рендерится)\\n' +\r\n              'vertical-align - выравнивает конетнт, работает с table-cell: top по верху; middle центру, дефолт; bottom снизу; baseline линия текста соседних ячеек; sub 2 в H₂O; super 2 в x²; text-top, text-bottom верх, низ текста относительно шрифта строки\\n' +\r\n              'caption-side - для table-caption: top, bottom\\n' +\r\n              'border-collapse - взаимодействие границ: collapse границы ячеек сливаются в одну; separate границы остаются отдельным, можео использовать border-spacing\\n' +\r\n              'border-spacing - задает расстояние между ячейками\\n' +\r\n              'empty-cells - видимость пустых ячеек: show, hide' +\r\n              'Дисплеи:\\n' +\r\n              'table-row - то же что и <tr>, ряд таблицы\\n' +\r\n              'table-cell - то же что и <td>, ячейка таблицы, автоматически подстраивается по высоте, по умолчанию vertical-align: middle.\\n' +\r\n              'table-caption - то же что и <caption>, заголовок, отображается над или под таблицей, зависит от caption-side\\n' +\r\n              'table-column - то же что и <col>, для задания стилей например цвет, ширина. Не создает ячейку, только стилизует\\n' +\r\n              'table-column-group - то же что и <colgroup>, группировко колонок\\n' +\r\n              'table-row-group - то же что и <tbody>, группировка рядов\\n' +\r\n              'table-header-group - то же что и <thead>, заголовочная группа рядов\\n' +\r\n              'table-footer-group - то же что и <tfoot>, нижняя группа рядов\\n\\n' +\r\n\r\n              'Видимость:\\n' +\r\n              'visibility - visible дефолт; hidden невидимый но занимает место; collapse для таблиц: скрывает элемент и убирает его место\\n' +\r\n              'opacity - от 0 до 1\\n\\n' +\r\n\r\n              'Flex:\\n' +\r\n              'flex-direction - направление оси: row, row-reverse, column, column-revers\\n' +\r\n              'flex-wrap - перенгс строк: nowrap, wrap, wrap-reverse\\n' +\r\n              'flex-flow - сокращенная запись. Например flex-flow: row wrap;\\n' +\r\n              'justify-content - выравнивание по оси: flex-start дефолт; flex-end; center; space-between первый и последний прилипли к стенкам, между ними равномерно; space-around у каждого отступы; space-evenly везде равные отступы\\n' +\r\n              'align-items - выравнивание поперек оси: stretch растягивает по высоте контейнера, дефолт; flex-start; flex-end; center; baseline выравнивание по базовой линии текста\\n' +\r\n              'align-content - выравнивание строк (если их несколько): flex-start; flex-end; center; space-between как у jc; space-around как у jc; stretch строки растягиваются по высоте контейнера\\n' +\r\n              'gap, row-gap, column-gap - отступы между элементами. gap это сокращенная запись row-gap и column-gap\\n' +\r\n              'order - меняет порядок элементов (дается самим элементам, а не контейнеру). 0 дефолт\\n' +\r\n              'flex-grow - определяет, может ли элемент расти, чтобы занять свободное место: 0 не растет, дефолт; 1 растет равномерно с другими; 2 растет в 2 раза быстрее чем 1 (и так далее)\\n' +\r\n              'flex-shrink - отвечает за сжатие, когда не хватает места: 1 сжимается, дефолт; 0 не сжимается\\n' +\r\n              'flex-basis - определяет начальный размер элемента для главной оси перед тем как флекс начнет его менять под оставшееся место(аналог width, но для флексов. \"говорит: «считай, что я хочу стартовать с такого размера»\". Если grow 0, работает как фиксированная ширина, иначе как минимальная): auto дефолт; 0 прадпочитает начинать с нулевого размера типа;\\n' +\r\n              'flex - короткая запись, совмещающий: grow shrink basis\\n' +\r\n              'align-self - личный align-items для конкретного элемента: auto берет из align-items, дефолт; имеет такие же варианты значений как и у align-items\\n\\n' +\r\n\r\n              'Grid(сетка):\\n' +\r\n              'grid-template-columns, grid-template-rows - задают колонки и строки сетки: auto подстраивается под контент; fr это доля, например grid-template-columns: 1fr 2fr тогда первый элемент занимает треть, а второй 2 трети; repeat(n, value) повтор, например grid-template-columns: repeat(3, 1fr) делает 3 равных элемента; minmax(min, max) динамическая ширина, например grid-template-columns: repeat(3, minmax(150px, 1fr)) делает 3 элемента с размеров минимум 150 пикселей и максимум 1 фрейм; nакже можно использовать auto-fill и auto-fit например grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) создаст как можно больше колонок шириной минимум 200px, если остались пустые колонки на которых не хватило карточек то они так и останутся; если же в последнем примере вместо fill написать fit и при этом карточек также не хватило и остались пустые колонки то они схлопываются и карточки растяиваются чтобы заполнить пустые места\\n' +\r\n              'grid-area, grid-template-areas - позволяет задать схему расположения по именам. Например задаем элементу grid-area: header; и далее пишем grid-template-areas:\\n' +\r\n              '  \"header header\"\\n' +\r\n              '  \"sidebar main\"\\n' +\r\n              '  \"footer footer\";\\n' +\r\n              'grid-auto-rows, grid-auto-columns - устанавливает размер строк или колонок, которые создаются автоматически (если элементов больше, чем явно заданных ячеек): например если только 2 колонки (grid-template-columns: 1fr 1fr;) а элементов 3, то написав grid-auto-rows: 200px лишний элемент перекинется на новую строку которая будет иметь высоту 200px\\n' +\r\n              'grid-auto-flow - управляет направлением заполнения сетки (аналог fd из Flex): row дефолт; сolumn; row dense / column dense ...с заполнением пустоты, уплотняя элементы\\n' +\r\n              'gap, row-gap, column-gap - то же самое, что и у Flex\\n' +\r\n              'grid-column, grid-row - позволяют разместить элемент в нужных линиях сетки: auto дефолт; например grid-column: 1 / 3; от линии 1 до линии 3; можно еще использовать span вот так grid-column: span 2; означает занять n колонок (в моем примере 2)\\n' +\r\n              'grid-area  - либо дает имя для grid-template-areas либо может делать сразу всё (даётся элементу): например grid-area: 2 / 1 / 4 / 3 (использует grid-row-start, grid-column-start, grid-row-end, grid-column-end) \\n' +\r\n              'justify-self, align-self, place-self (по оси, поперек оси, обе оси. Если не ошибаюсь, то зависит от grid-auto-flow) - управляют выравниванием элемента внутри лично своей ячейки: start; end; center; stretch  дефолт (растягивает элемент)\\n' +\r\n              'justify-items, align-items, justify-content, align-content, place-items, place-content - выравнивание всей сетки в контейнере: justify-items, align-items, place-items (обе оси) работают на уровне ячейки; justify-content, align-content, place-content (обе оси) работают на уровне всей сетки; \\n' +\r\n              'grid-template - можно обьеденить шаблон, например: grid-template:\\n' +\r\n              '  \"header header\" 100px\\n' +\r\n              '  \"sidebar main\" auto\\n' +\r\n              '  \"footer footer\" 50px /\\n' +\r\n              '  200px 1fr;\\n' +\r\n              'subgrid (display) -  позволяет вложенному гриду наследовать линии родителя: например у родителя 3 колонки 200px,1fr,300px, тогда у ячейки с субгридом будет такая же сетка с такими же 3 колонками\\n' +\r\n              'order - как и у Flex изменяет порядок элементов в сетке\\n\\n' +\r\n\r\n              'Position:\\n' +\r\n              'statis дефолт; relative позиционируется относительно себя, absolute становится \"призрачным\" и позиционируется относительно родителя с любым position кроме статик, иначе body; fixed выпадает из потока и прилипает к экрану; sticky это комбинация relative и sticky прилипая к экрану когда доходит до своей конечной позиции\\n' +\r\n              'z-index - определяет порядок наложение, кто выше кто ниже. Может быть отрицательным\\n\\n' +\r\n\r\n              'псевдоклассы ui:\\n' +\r\n              ':hover - при наведении курсора\\n' +\r\n              ':active - в момент нажатия/срабатывания (нажатая ссылка/кнопка)\\n' +\r\n              ':focus - элемент в фокусе (tab/клик)\\n' +\r\n              ':focus-visible - современный вариант: показывает фокус только когда это визуально нужно (обычно клавиатурная навигация). полезен для доступности\\n' +\r\n              ':focus-w   ithin - элемент, который содержит элемент в фокусе (родитель получает стиль)\\n' +\r\n              ':enabled, :disabled - активны/неактивны элементы формы\\n' +\r\n              ':checked - checked для <input type=\"checkbox|radio\">\\n' +\r\n              ':read-only, :read-write - поля только для чтения / доступные для редактирования\\n' +\r\n              ':required, :optional, :valid, :invalid - валидация форм: :required поле с required атрибутом; :valid, :invalid следит за валидностью полей, например если в input[type=\"email\"] написать рандомный набор букв, то браузер поймет что это не почта; :in-range / :out-of-range значение в пределах min ≤ value ≤ max / значение вне этого диапазона (применимы к числовым/дейт/временным полям и к range (ползунок)). Например <input type=\"range\" min=\"0\" max=\"100\" value=\"120\"> тут :out-of-range; :placeholder-shown сработает, если у поля активен placeholder\\n\\n' +\r\n\r\n              'псевдокласс древо:\\n' +\r\n              ':first-child - первый ребёнок своего родителя\\n' +\r\n              ':last-child - последний ребёнок\\n' +\r\n              ':only-child - единственный ребёнок\\n' +\r\n              ':nth-child(an+b) - выбирает n-ый ребёнок по формуле an+b: например odd или же 2n+1 это нечетные; even/2n четные; 3n каждый третий; 1 первый\\n' +\r\n              ':nth-last-child() - то же что и :nth-child, но считает с конца\\n' +\r\n              ':nth-of-type() - выбирает элементы того же типа.\\n' +\r\n              'ОТЛИЧИЕ между :nth-child(n) и :nth-of-type(n) - скажем у нас есть div в котором 4 элемента в следующем порядке: p,span,p,p. У обоих p:псевдокласс(1) выберет первый p. p:псевдокласс(2) тут nth-child не сможет выбрать, потому что второй элемент span а не p, а вот nth-of-type сможет потому что второй по счёту p в принципе существует\\n' +\r\n              ':first-of-type, :last-of-type, :only-of-type - аналоги :nth-of-type. Первый, последний, единственный\\n' +\r\n              ':empty - элемент без дочерних узлов (нет текста, нет элементов)\\n' +\r\n              ':root - корневой элемент (html в html-документе)\\n' +\r\n              ':not(selector) - отрицание. например :not(:nth-child(odd)) означает все элементы кроме нечетных\\n' +\r\n              ':is(...) - по сути воплощение or, как фильтр (). Пример: вместо article h1, article h2, article h3 можно использовать article :is(h1,h2,h3). Принимает список селекторов, удобен для уменьшения специфичности; его специфичность равна специфичности самого вложенного селектора. Пример специфичности: article :is(h1, .title) {color: blue;} затем если написать article h1 {color: red;} то title останется синим. Кароче используем только если сознательно работаем со специфичностью, иначе используем обычную вложенность классов через &\\n' +\r\n              ':where(...) - похож на :is, но всегда с нулевой специфичностью — удобно для сбросов стилей. Пример специфичности: .card :where(h1, h2, h3) {color: blue} затем напишем просто .card h1 (color: red), то h1 станет красным потому что where имеет нулевую специфичность и не мешает\\n\\n' +\r\n\r\n              'псевдоклассы остальные:' +\r\n              ':target - элемент, чей id совпадает с хэшем url (#section1)\\n' +\r\n              ':lang() - выбирает по атрибуту lang. Типа :lang(en) для <p lang=\"en\"></p>\\n' +\r\n              ':indeterminate - у <input type=\"checkbox\"> в промежуточном состоянии. Нельзя задать через html, только через js вот так checkbox.indeterminate = true;\\n' +\r\n              ':has - div:has(.error): выбирает див в котором есть определенный тег, в нашем случае тег с классом error\\n' +\r\n              '::before, ::after - вставляет контент перед, после содержимым элемента, требует content: ... для видимого результата (по умолчанию инлайновые; часто ставят display: inline-block или block)\\n' +\r\n              '::first-letter - стилизует первую букву блока (только для блочных элементов: display: block)\\n' +\r\n              '::first-line - стилизует первую строку текста (работает только с ограниченным набором свойств. В основном можно только типографические свойства)\\n' +\r\n              '::placeholder - стилизует текст плейсхолдера в input/textarea (частично кроссбраузерность, в старых браузерах использовались префиксы ::-webkit-input-placeholder)\\n' +\r\n              '::marker  стилизует маркер списка (<li> маркер)\\n' +\r\n              '::selection - стиль для выделенного текста (цвет фона/цвет текста)\\n' +\r\n              '::backdrop - фон для модальных элементов (например, <dialog>)\\n\\n' +\r\n\r\n              'Задержка:\\n' +\r\n              'transition: a b c d -плавные переходы, принимающие следующие значения: a какие свойства будут анимироваться например transform; b время анимации; c скорость изменения; d задержка перед анимацией\\n' +\r\n              'КРИВАЯ УСКОРЕНИЯ для transition - linear линейное, постоянная скорость; ease дефолт, плавное ускорение и замедление; ease-in ускорение в начале; ease-out замедление к концу; ease-in-out ускорение в начале и замедление в конце; step-start прыжок сразу в конечное значение; step-end то же что и step-start, но если старт со старта прыгает, то энд ждет конца для прыжка;\\n' +\r\n              'cubic-bezier(x1, y1, x2, y2) - кривая Безье задаёт ускорение/замедление анимации по времени. Значения даются от 0 до 1:\\n' +\r\n              'x1 отвечает за начало ускорения, <0.5 ускорение начинается раньше а элемент быстро достигает средней скорости, <0.5 сначало медленно а ускорение начинается позже, 0 мнговенный старт ускорения, 1 элемент почти не движется в начале а к концу резки рывок;\\n' +\r\n              'y1 интенсивность начального ускорения. <0.5 медленное начало, >0.5 быстрое резкое начало, 0 свойство почти не меняется в начале, 1 мнгновенный рывок к среднему значению (скачок), <0 или >1 обратная инерция или подпрыгивание;\\n' +\r\n              'x2 когда начнется замедление к концу анимки <0.5 замедление начинается раньше а анимация заканчивается плавно, >0.5 замедление начинается поздно типа резкий финиш, 0 элемент резко меняет значение к концу, 1 плавно до конца почти линейно;\\n' +\r\n              'y2 скорость конца анимки (замедление/ускорение) <0.5 замедление плавное но свойство к концу не достигает полной величины сразу, >0.5 резкий рывок к финальному значению, <0 элемент «промахивается» ниже стартового значения и возвращается, >1 «перепрыгивание» выше конечного значения, потом возвращение,\\n\\n' +\r\n\r\n              'Transform:\\n' +\r\n              'transform-origin - центр трансформации, определяет точку, относительно которой происходит вращение/масштабирование: center center дефолт\\n' +\r\n              'translate(x,y) - перемещение по осям x и y\\n' +\r\n              'rotate(angle) - вращение. Значение в deg (градусы)\\n' +\r\n              'scale(x,y) - масштабирование\\n' +\r\n              'skew(x,y) - искажение. Значение в deg\\n' +\r\n              'matrix(a,b,c,d,tx,ty) - полный 2д контроль через матрицу. Редко используется хз\\n\\n' +\r\n\r\n              'Анимации:\\n' +\r\n              'Синтаксис - сначало пишем фрейм: @keyframes name { fro {opacity: 0;} to{opacity: 1;} }; Затем даем элементы стиль animation: a b c d e f g h со следующими параметрами: a название анимации, b время цикла; c кривая ускорения; d задержка старта; e количество повторов(можно infinite написать); f направление (alternate чередует реверс и нормал, reverse анимация в обратно порядке, normal дефолт, alternate-reverse то же что и alternate но начинает с другого); g состояние после анимации (forwards сохраняет конечное состояние анимации псле ее окончания, backwards Элемент при старте анимации сразу принимает значения из from даже если есть задержка старта, both комбинация forwards + backwards, none дефолт); h управление паузой, можно допустим при наведении пусть анимация стопается а потом когда мышь уйдет то продолжает (paused, running дефолт)\\n' +\r\n              'will-change - оптимизация: подсказывает браузеру, какие свойства скоро будут изменены (чтобы подготовить слои GPU). Использовать осторожно потому что жрет много\\n\\n' +\r\n\r\n              'Translate 3d:\\n' +\r\n              'perspective - без этого не работает 3д и Z направление, дается контейнеру (родителю) 3д элемента: например даем значение 500px это как бы расстояние камеры до 3д обьекта. Чем больше число тем меньше видно 3д, чем меньше число тем лучше видн 3д. \\n' +\r\n              'perspective-origin - положение камеры: проценты либо ключевые слова например perspective-origin: right top;\\n' +\r\n              'transform-style - как бы разрешает 3д: flat дефолт, все плоские; preserve-3d 3д работает. Лучше использовать вместе с perspective всегда\\n' +\r\n              'translateX(), translateY(), translateZ() - двигаем: лево право; вверх вниз; вперед назад\\n' +\r\n              'transform-origin - центр вращения, мастабирования и тд: center дефолт; top, bottom, left, right; % проценты относительно размера элемента (0% = левый/верхний край, 100% = правый/нижний); length (px, em) точное смещение точки вращения\\n' +\r\n              'rotateX(), rotateY(), rotateZ() - крутим: лево право; вверх вниз; вперед назад\\n' +\r\n              'scaleX(), scaleY(), scaleZ() - меняем размер: горизонталь; вертикаль; растягиваем по Z\\n\\n' +\r\n\r\n              'Тени:\\n' +\r\n              'box-shadow: a b c d e f - тень: a, b смещение по горизонтали, вертикали; c радиус размытия тени; d размер тени; e цвет, можно добавить alpha; inset (необяз) делает тень внутренней. Можно задать несколько теней через запятую\\n' +\r\n              'text-shadow: a b c d - тень текста: буквы те же что и у box-shadow. Можно задать несколько теней через запятую\\n\\n' +\r\n\r\n              'Градиенты:\\n' +\r\n              'linear-gradient(to a, цвет,цвет...) - градиент по линии: a направление например to right или 45deg. Цветов можно больше, на это указывает многоточие. Можно указать позицию написав после цвета например 50%\\n' +\r\n              'radial-gradient(a b at c, цвет, цвет...) - по кругу/эллипсу от центра: a форма circle/ellipse; b размер closest-side/contain до ближайшей стороны элемента, closest-corner/cover до ближайшего угла, farthest-side до самой дальней стороны, farthest-corner до самого дальнего угла это дефолт; c центр градиенты место например center или % например at top left. Можно комбинировать с background-size; Можно указать позицию написав после цвета например 50%\\n' +\r\n              'conic-gradient(a, at b, цвет, цвет...) - конусный:a начальный угол по дефолту from 0deg, можно дать значение например from 90deg; b центр градиента место например center или % например at top left; Можно указать позицию написав после цвета например 50%\\n\\n' +\r\n\r\n              'Медиа запросы и адаптивность:\\n' +\r\n              'СИНТАКСИС media - @media <условие> {стили}. Условия: ширина, высота, минмакс; orientation ориентация portrait вертикальная landscape горизонтальная; aspect-ration соотношение; можно сделать ИЛИ через запятую; можно несколько условий через and например так (min-width: 600px) and (max-width: 1200px); all для всех; screen для экранов; only используется чтобы старые браузеры не пытались выполнить стили не понимая условие, обычно используется со screen например @media only screen and (max-width: 768px); not отрицание, чаще используется с screen; prefers-reduced-motion пожелание пользователя об анимациях reduce надо меньше анимаций например @media (prefers-reduced-motion: reduce), no-preference дефолт; prefers-color-scheme пожелани пользователя о теме dark, light; Также очень много условий я не написал потому что они слишком специфичны;\\n' +\r\n              'clamp и calc - хорошо могут помочь. Смотреть о них ниже\\n\\n' +\r\n\r\n              'Остальное:\\n' +\r\n              'pointer-event - управляет, как элемент реагирует на указатели: none некликаблеьный и даже хавер не работает; auto дефолт; также есть куча значения но они чисто для svg, решил не писать их\\n' +\r\n              'user-select - управляет возможностью выделения текста пользователем: auto дефолт; text разрешает выделение текста, это если изначально его нельзя выделять; none запрет; all при первом клике или выделении всё содержимое элемента выделяется целиком; contain текст можно выделять, но выделение не выходит за пределы элемента\\n' +\r\n              'clamp() - значение с минимумрм, предпочетаемым и максимумом, альтернатива для медиазапросов. Пример: font-size: clamp(16px, 5vw, 32px); обьяснение 1.Если экран маленький, font-size не будет меньше 16px 2.На средних экранах font-size = 5% от ширины окна 3.На больших экранах font-size не превысит 32px\\n' +\r\n              'calc() - комбинируем разные единицы измерения: можно использовать арифметические операции, при этом смешивая разное например calc(100% - 50px);. Делить можно только на числа без значений, например на 2, но не на 2%\\n'\r\n\r\n        },\r\n    ]\r\n}"],"names":["syntax"],"mappings":"AAAA,MAAeA,EAAA,CACX,MAAO,YACP,SAAU,YACV,GAAI,SACJ,MAAO,CACH,CACI,QAAS,sBACT,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,y}